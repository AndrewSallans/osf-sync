import asyncio
import types

import aiohttp


class JSONAPIResourceMeta(type):
    _resources = {}

    def __new__(cls, name, bases, attrs):
        res = type.__new__(cls, name, bases, attrs)
        JSONAPIResourceMeta._resources[attrs.get('resource_type', name.lower() + 's')] = res
        return res


class JSONAPIResource(metaclass=JSONAPIResourceMeta):

    autogenerated = False

    @classmethod
    def load(cls, data, session, parent=None):
        if data['type'] not in JSONAPIResourceMeta._resources:
            return type(data['type'].rstrip('s').capitalize(), (JSONAPIResource, ), {'autogenerated': True})(data, session, parent=parent)
        return JSONAPIResourceMeta._resources[data['type']](data, session, parent=parent)

    @classmethod
    @asyncio.coroutine
    def _get_pages(cls, data, session):
        culm = data['data']
        while data.get('links', {}).get('next'):
            resp = yield from session.request('GET', data['links']['next'])
            assert resp.status == 200, 'Ohnoes'
            data = yield from resp.json()
            culm.extend(data['data'])
        return culm

    @classmethod
    def relationship_factory(cls, relation, session):
        @asyncio.coroutine
        def relationship(self):
            resp = yield from session.request('GET', relation['links']['related']['href'])
            assert resp.status == 200, 'Ohnoes'
            data = yield from resp.json()
            if isinstance(data['data'], dict):
                return cls.load(data['data'], session, parent=self)
            return [cls.load(inst, session, parent=self) for inst in (yield from cls._get_pages(data, session))]
        return relationship

    def __init__(self, data, session, parent=None):
        self.__dict__.update(data['attributes'])
        for name, relation in data.get('relationships', {}).items():
            setattr(self, name, types.MethodType(JSONAPIResource.relationship_factory(relation, session), self))
        self.raw = data
        self.id = data['id']
        self.type = data['type']
        self._session = session
        self.parent = parent

    def __repr__(self):
        return '<{}(id={}, autogenerated={})>'.format(self.__class__.__name__, self.id, self.autogenerated)
